def recursive(iterable):  # Функция с рекурсией, принимаем только исходный список
    exception1 = (
        list, tuple, set)  # список исключений, для которых требуется рекурсия (кроме словаря, к нему отдельный подход)
    new1 = []  # Создали пустой список в который будем записывать данные из изначального
    for i in iterable:  # Пробегаем изначальный список циклом
        if isinstance(i, exception1):  # Если нашли тип данных который записан в исключении, например ещё один список
            new1.extend(
                recursive(i))  # рекурсия + .extend() берёт элементы вложенного (списка, множества, кортежа) и добавляет
            # их в конец new1, а если там вложения еще глубже, то обращаемся к ним с помощью рекурсии повторно
        elif isinstance(i, dict):  # Иначе Если у нас словарь
            new1.extend(recursive(
                i.items()))  # То по аналогии с верхней рекурсии, но элементы вытаскиваем с помощью метода .items()
        else:  # Иначе
            new1.append(i)  # Просто добавляем с помощью .append() текущий элемент в конец списка new1
    return new1  # Возвращаем распакованный список
test = [None, [1, ({2, 3}, {'foo': 'bar'})]]  # Исходный список с вложениями
print(test)
print(recursive(test))  # Вызываем функцию распаковки списка c рекурсией и её итог выводим на экран
